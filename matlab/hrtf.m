% Implementation of the HRTF model proposed by C.P.Brown and R.O.Duda (one possibility)% Note	  : This is a flexible solution that can easily be modified. Clarity and %				 flexibility have been preferred over speed optimization.% Filename : HRTF.m% Author   : Adrian Jost% Date     : 02/20/98	clear;% Flags (1 = enable, 0 = disable)   	HeadDelay 		 = 1; 	HeadFracDelays  = 1;   Headtf 	 		 = 1;   Pinna 	 		 = 1;      PinnaFracDelays = 1;   Room 		 		 = 1;   % Parameters   	c = 330;   				% Speed of sound [m/s]	a = 15E-2 / 2;			% Head radius	Teta = 50*pi/180;		% Azimuth [-pi/2..pi/2]	phi = 45*pi/180;		% Elevation [-pi/2..pi/2]   % Input wav file   Filename = 'c:/david_rodriguez_matthew.wav';	SIZ = wavread(Filename);	[u,fs,bits] = wavread(Filename);	disp(sprintf('Input wave file is %d Samples, %d Channel(s), %d Hz, %d bits resolution',SIZ,fs,bits));	T = 1/fs;			 	% Sampling period [s]   % Process sound vector   if Pinna == 1,   			% Start with the pinna model as it is the same for L&R   p = [.5 -1 .5 -.25 .25]; % amplitude p(k) of each delay    A = [1 5 5 5 5];	B = [2 4 7 11 13];	D = [1 .5 .5 .5 .5];	%D = [.85 .35 .35 .35 .35];	Tau = A*cos(Teta/2).*sin(D*(pi/2-phi)) + B; % Tau(k), k=1..5, 1 row vector   Tau = Tau * fs / 44100; 	% Resize delays, the equation is designed for 44.1K   if PinnaFracDelays == 1,      pp = Tau-floor(Tau);		% Fractional delay      for k = 1:5         if pp(k) > 0.9,            Tau(k) = ceil(Tau(k));            pp(k) = 0;         end      end      Hp = d2d(tf(1,1,T)*p,[],floor(Tau)); 	% create 5 unit z transfer function,       													% multiply each one by the gain p(k),       													% and add delays.      C = (1-pp)./ (1+pp);      Hc = tf([C(1) 1],[1 C(1)],T);				% Initialize Hc to any tf object      % Compute yp. Input to pinna tf (Hp*Hc) is the monaural signal u      for k = 1:5,         Hc(:,k) = tf([C(k) 1],[1 C(k)],T);         [ypk(:,k)] = lsim (Hp(k)*Hc(k),u);      end   else      Hp = d2d(tf(1,1,T)*p,[],round(Tau));	% No fractional delay, round delays      for k = 1:5,         [ypk(:,k)] = lsim (Hp(k),u);      end   end%if PinnaFracDelays   yp = u+ypk(:,1)+ypk(:,2)+ypk(:,3)+ypk(:,4)+ypk(:,5); % Sum up pinna delayselse yp = u; %No pinna modelend%Pinnaif Headtf == 1,		% Head tf   aL = 1-sin(Teta); % Auto-inverts coef aL,R if sin<0	aR = 1+sin(Teta);	Beta = 2*c/a;	HL = tf([aL Beta],[1 Beta]);	HR = tf([aR Beta],[1 Beta]);	% let MATLAB do the work (compute the Z-approx of the s-plane head tf)	HzL = c2d(HL,T,'tustin');	HzR = c2d(HR,T,'tustin');else    HzL = tf(1,1,T); % Create unity z-tf to allow further delay   HzR = tf(1,1,T);end%Headtfif HeadDelay == 1,	% Add delay   dL = ( a/c * (1+abs(Teta)) ) / T;	dR = ( a/c * (1-sin(abs(Teta))) ) / T;   if Teta < 0, 		% Just invert L&R delays      dL = dR;       dR = dL;    end   if HeadFracDelays == 1,      FdL = dL - floor(dL);      FdR = dR - floor(dR);      if FdL > 0.9, %do not allow C to take the value 0         dL = ceil(dL);         FdL = 0;      end      if FdR > 0.9,         dR = ceil(dR);         FdR = 0;      end      CL = (1-FdL) / (1+FdL);      CR = (1-FdR) / (1+FdR);      HcL = tf([CL 1],[1 CL],T);      HcR = tf([CR 1],[1 CR],T);      HzL = HzL * HcL;      HzR = HzR * HcR;   end%if HeadFracDelays   dL = floor(dL);   dR = floor(dR);   if dL ~= 0,       HzL = d2d(HzL,[],dL);    end   if dR ~= 0,       HzR = d2d(HzR,[],dR);    endend%HeadDelay% Compute yh	[yhL]=lsim(HzL,yp);	[yhR]=lsim(HzR,yp);   if Room,				% Simplest room model   Te = 15E-3/T; 	% 15ms delay   Attn = 15;    	% 15 dB attenuation	KL = 1; KR = 0.6;      KE = 1 / (10^(Attn/20));   He = d2d(tf(1,1,T),[],round(Te));   echo = lsim(He,u);   L = yhL*KL + echo*KE;	% Mix echo with the two channels   R = yhR*KR + echo*KE;else    L = yhL;   R = yhR;end%room% Scale output signals to +-1	ymax = max( [max(abs(L)),max(abs(R))] ); % Take the maximum value of both channels	L = L / ymax;	R = R / ymax;      % Write sound vector to disk (wav file)      filename = input('Filename: ','s');      wavwrite([L,R],fs,sprintf('c:/%s',filename));   